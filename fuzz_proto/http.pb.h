// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_http_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_http_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_http_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_http_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_http_2eproto;
namespace uwsgifuzz {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class HttpRequest;
class HttpRequestDefaultTypeInternal;
extern HttpRequestDefaultTypeInternal _HttpRequest_default_instance_;
}  // namespace uwsgifuzz
PROTOBUF_NAMESPACE_OPEN
template<> ::uwsgifuzz::Header* Arena::CreateMaybeMessage<::uwsgifuzz::Header>(Arena*);
template<> ::uwsgifuzz::HttpRequest* Arena::CreateMaybeMessage<::uwsgifuzz::HttpRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uwsgifuzz {

// ===================================================================

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uwsgifuzz.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uwsgifuzz.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_http_2eproto);
    return ::descriptor_table_http_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:uwsgifuzz.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_http_2eproto;
};
// -------------------------------------------------------------------

class HttpRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uwsgifuzz.HttpRequest) */ {
 public:
  inline HttpRequest() : HttpRequest(nullptr) {}
  virtual ~HttpRequest();

  HttpRequest(const HttpRequest& from);
  HttpRequest(HttpRequest&& from) noexcept
    : HttpRequest() {
    *this = ::std::move(from);
  }

  inline HttpRequest& operator=(const HttpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpRequest& operator=(HttpRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HttpRequest& default_instance();

  static inline const HttpRequest* internal_default_instance() {
    return reinterpret_cast<const HttpRequest*>(
               &_HttpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HttpRequest& a, HttpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HttpRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HttpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HttpRequest* New() const final {
    return CreateMaybeMessage<HttpRequest>(nullptr);
  }

  HttpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HttpRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HttpRequest& from);
  void MergeFrom(const HttpRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uwsgifuzz.HttpRequest";
  }
  protected:
  explicit HttpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_http_2eproto);
    return ::descriptor_table_http_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 5,
    kMethodFieldNumber = 1,
    kUriFieldNumber = 2,
    kVersionFieldNumber = 3,
    kBodyFieldNumber = 6,
  };
  // repeated .uwsgifuzz.Header headers = 5;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::uwsgifuzz::Header* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uwsgifuzz::Header >*
      mutable_headers();
  private:
  const ::uwsgifuzz::Header& _internal_headers(int index) const;
  ::uwsgifuzz::Header* _internal_add_headers();
  public:
  const ::uwsgifuzz::Header& headers(int index) const;
  ::uwsgifuzz::Header* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uwsgifuzz::Header >&
      headers() const;

  // bytes method = 1;
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const void* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // bytes uri = 2;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const void* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // bytes version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // bytes body = 6;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:uwsgifuzz.HttpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uwsgifuzz::Header > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_http_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// bytes key = 1;
inline void Header::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::key() const {
  // @@protoc_insertion_point(field_get:uwsgifuzz.Header.key)
  return _internal_key();
}
inline void Header::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:uwsgifuzz.Header.key)
}
inline std::string* Header::mutable_key() {
  // @@protoc_insertion_point(field_mutable:uwsgifuzz.Header.key)
  return _internal_mutable_key();
}
inline const std::string& Header::_internal_key() const {
  return key_.Get();
}
inline void Header::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:uwsgifuzz.Header.key)
}
inline void Header::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:uwsgifuzz.Header.key)
}
inline void Header::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:uwsgifuzz.Header.key)
}
inline std::string* Header::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_key() {
  // @@protoc_insertion_point(field_release:uwsgifuzz.Header.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:uwsgifuzz.Header.key)
}

// bytes value = 2;
inline void Header::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::value() const {
  // @@protoc_insertion_point(field_get:uwsgifuzz.Header.value)
  return _internal_value();
}
inline void Header::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:uwsgifuzz.Header.value)
}
inline std::string* Header::mutable_value() {
  // @@protoc_insertion_point(field_mutable:uwsgifuzz.Header.value)
  return _internal_mutable_value();
}
inline const std::string& Header::_internal_value() const {
  return value_.Get();
}
inline void Header::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:uwsgifuzz.Header.value)
}
inline void Header::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:uwsgifuzz.Header.value)
}
inline void Header::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:uwsgifuzz.Header.value)
}
inline std::string* Header::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_value() {
  // @@protoc_insertion_point(field_release:uwsgifuzz.Header.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:uwsgifuzz.Header.value)
}

// -------------------------------------------------------------------

// HttpRequest

// bytes method = 1;
inline void HttpRequest::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HttpRequest::method() const {
  // @@protoc_insertion_point(field_get:uwsgifuzz.HttpRequest.method)
  return _internal_method();
}
inline void HttpRequest::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:uwsgifuzz.HttpRequest.method)
}
inline std::string* HttpRequest::mutable_method() {
  // @@protoc_insertion_point(field_mutable:uwsgifuzz.HttpRequest.method)
  return _internal_mutable_method();
}
inline const std::string& HttpRequest::_internal_method() const {
  return method_.Get();
}
inline void HttpRequest::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HttpRequest::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:uwsgifuzz.HttpRequest.method)
}
inline void HttpRequest::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:uwsgifuzz.HttpRequest.method)
}
inline void HttpRequest::set_method(const void* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:uwsgifuzz.HttpRequest.method)
}
inline std::string* HttpRequest::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HttpRequest::release_method() {
  // @@protoc_insertion_point(field_release:uwsgifuzz.HttpRequest.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HttpRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:uwsgifuzz.HttpRequest.method)
}

// bytes uri = 2;
inline void HttpRequest::clear_uri() {
  uri_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HttpRequest::uri() const {
  // @@protoc_insertion_point(field_get:uwsgifuzz.HttpRequest.uri)
  return _internal_uri();
}
inline void HttpRequest::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:uwsgifuzz.HttpRequest.uri)
}
inline std::string* HttpRequest::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:uwsgifuzz.HttpRequest.uri)
  return _internal_mutable_uri();
}
inline const std::string& HttpRequest::_internal_uri() const {
  return uri_.Get();
}
inline void HttpRequest::_internal_set_uri(const std::string& value) {
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HttpRequest::set_uri(std::string&& value) {
  
  uri_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:uwsgifuzz.HttpRequest.uri)
}
inline void HttpRequest::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:uwsgifuzz.HttpRequest.uri)
}
inline void HttpRequest::set_uri(const void* value,
    size_t size) {
  
  uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:uwsgifuzz.HttpRequest.uri)
}
inline std::string* HttpRequest::_internal_mutable_uri() {
  
  return uri_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HttpRequest::release_uri() {
  // @@protoc_insertion_point(field_release:uwsgifuzz.HttpRequest.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HttpRequest::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:uwsgifuzz.HttpRequest.uri)
}

// bytes version = 3;
inline void HttpRequest::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HttpRequest::version() const {
  // @@protoc_insertion_point(field_get:uwsgifuzz.HttpRequest.version)
  return _internal_version();
}
inline void HttpRequest::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:uwsgifuzz.HttpRequest.version)
}
inline std::string* HttpRequest::mutable_version() {
  // @@protoc_insertion_point(field_mutable:uwsgifuzz.HttpRequest.version)
  return _internal_mutable_version();
}
inline const std::string& HttpRequest::_internal_version() const {
  return version_.Get();
}
inline void HttpRequest::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HttpRequest::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:uwsgifuzz.HttpRequest.version)
}
inline void HttpRequest::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:uwsgifuzz.HttpRequest.version)
}
inline void HttpRequest::set_version(const void* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:uwsgifuzz.HttpRequest.version)
}
inline std::string* HttpRequest::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HttpRequest::release_version() {
  // @@protoc_insertion_point(field_release:uwsgifuzz.HttpRequest.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HttpRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:uwsgifuzz.HttpRequest.version)
}

// repeated .uwsgifuzz.Header headers = 5;
inline int HttpRequest::_internal_headers_size() const {
  return headers_.size();
}
inline int HttpRequest::headers_size() const {
  return _internal_headers_size();
}
inline void HttpRequest::clear_headers() {
  headers_.Clear();
}
inline ::uwsgifuzz::Header* HttpRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:uwsgifuzz.HttpRequest.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uwsgifuzz::Header >*
HttpRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:uwsgifuzz.HttpRequest.headers)
  return &headers_;
}
inline const ::uwsgifuzz::Header& HttpRequest::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::uwsgifuzz::Header& HttpRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:uwsgifuzz.HttpRequest.headers)
  return _internal_headers(index);
}
inline ::uwsgifuzz::Header* HttpRequest::_internal_add_headers() {
  return headers_.Add();
}
inline ::uwsgifuzz::Header* HttpRequest::add_headers() {
  // @@protoc_insertion_point(field_add:uwsgifuzz.HttpRequest.headers)
  return _internal_add_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uwsgifuzz::Header >&
HttpRequest::headers() const {
  // @@protoc_insertion_point(field_list:uwsgifuzz.HttpRequest.headers)
  return headers_;
}

// bytes body = 6;
inline void HttpRequest::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HttpRequest::body() const {
  // @@protoc_insertion_point(field_get:uwsgifuzz.HttpRequest.body)
  return _internal_body();
}
inline void HttpRequest::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:uwsgifuzz.HttpRequest.body)
}
inline std::string* HttpRequest::mutable_body() {
  // @@protoc_insertion_point(field_mutable:uwsgifuzz.HttpRequest.body)
  return _internal_mutable_body();
}
inline const std::string& HttpRequest::_internal_body() const {
  return body_.Get();
}
inline void HttpRequest::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HttpRequest::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:uwsgifuzz.HttpRequest.body)
}
inline void HttpRequest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:uwsgifuzz.HttpRequest.body)
}
inline void HttpRequest::set_body(const void* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:uwsgifuzz.HttpRequest.body)
}
inline std::string* HttpRequest::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HttpRequest::release_body() {
  // @@protoc_insertion_point(field_release:uwsgifuzz.HttpRequest.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HttpRequest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:uwsgifuzz.HttpRequest.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace uwsgifuzz

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_http_2eproto
